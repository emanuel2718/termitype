name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
      publish_crates:
        description: "Publish to crates.io"
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

permissions:
  contents: write

jobs:
  build:
    name: Build release binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_extension: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_extension: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_extension: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: "release-${{ matrix.target }}"

      - name: Install musl-tools (for musl target)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive
        shell: bash
        run: |
          binary_name="termitype${{ matrix.binary_extension }}"
          archive_name="termitype-${{ inputs.tag_name }}-${{ matrix.target }}"

          mkdir -p "$archive_name"
          cp "target/${{ matrix.target }}/release/$binary_name" "$archive_name/"
          cp README.md "$archive_name/"
          cp LICENSE "$archive_name/"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "$archive_name.zip" "$archive_name"
            echo "ARCHIVE_NAME=$archive_name.zip" >> $GITHUB_ENV
          else
            tar -czf "$archive_name.tar.gz" "$archive_name"
            echo "ARCHIVE_NAME=$archive_name.tar.gz" >> $GITHUB_ENV
          fi

          # checksums
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile "$archive_name.zip" SHA256 > "$archive_name.zip.sha256"
          else
            shasum -a 256 "$archive_name.tar.gz" > "$archive_name.tar.gz.sha256"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.ARCHIVE_NAME }}.sha256

  release:
    name: Create GitHub Release
    needs: build
    environment: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          archives=""
          for artifact_dir in ./artifacts/release-*; do
            archives="$archives $artifact_dir/*"
          done

          if gh release view "${{ inputs.tag_name }}" >/dev/null 2>&1; then
            echo "Release ${{ inputs.tag_name }} already exists, updating..."
            gh release upload "${{ inputs.tag_name }}" $archives --clobber
          else
            echo "Creating new release ${{ inputs.tag_name }}..."
            gh release create "${{ inputs.tag_name }}" \
              --title "Release ${{ inputs.tag_name }}" \
              --generate-notes \
              ${{ inputs.prerelease && '--prerelease' || '' }} \
              $archives
          fi

  publish:
    name: Publish to crates.io
    needs: release
    environment: publish
    runs-on: ubuntu-latest
    if: inputs.publish_crates
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: "publish"

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
